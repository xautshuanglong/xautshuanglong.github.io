<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shuanglong</title>
  
  <subtitle>严于律己 宽以待人</subtitle>
  <link href="https://xautshuanglong.github.io/atom.xml" rel="self"/>
  
  <link href="https://xautshuanglong.github.io/"/>
  <updated>2023-08-12T07:57:58.886Z</updated>
  <id>https://xautshuanglong.github.io/</id>
  
  <author>
    <name>JiangShuanglong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Transaction ACID 事务的特性</title>
    <link href="https://xautshuanglong.github.io/2021/08/25/Database/Transaction-ACID-%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%89%B9%E6%80%A7/"/>
    <id>https://xautshuanglong.github.io/2021/08/25/Database/Transaction-ACID-%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%89%B9%E6%80%A7/</id>
    <published>2021-08-25T01:51:38.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<p>对数据库事务的理解</p><span id="more"></span><h2 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h2><ol><li>原子性（Atomicity）</li><li>一致性（Consistency）</li><li>隔离性（Isolation）</li><li>持久性（Durability）</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/98465611">事务的四大特性ACID</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;对数据库事务的理解&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://xautshuanglong.github.io/categories/Database/"/>
    
    
    <category term="transaction" scheme="https://xautshuanglong.github.io/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>MIDI 协议与应用</title>
    <link href="https://xautshuanglong.github.io/2021/07/22/CommonSense/MIDI%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <id>https://xautshuanglong.github.io/2021/07/22/CommonSense/MIDI%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%BA%94%E7%94%A8/</id>
    <published>2021-07-22T09:32:55.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<p>码出旋律</p><span id="more"></span><h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><p><a href="https://blog.csdn.net/cenzmin/article/details/44317575">midi接口和midi time code（MTC）</a><br><a href="https://zhuanlan.zhihu.com/p/82245395">如何同步您的MIDI设备</a><br><a href="https://www.cnblogs.com/us-wjz/articles/11618899.html">midi文件解析</a><br><a href="http://www.imus.cn/classroom/other1/1181.html">闲谈：关于MIDI控制协议，可假装充当控制器购买指南</a><br><a href="https://docs.microsoft.com/en-us/windows/win32/multimedia/midi-functions">MIDI Functions</a><br><a href="https://docs.microsoft.com/en-us/windows/win32/multimedia/mci-functions?redirectedfrom=MSDN">MCI Functions</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;码出旋律&lt;/p&gt;</summary>
    
    
    
    <category term="CommonSense" scheme="https://xautshuanglong.github.io/categories/CommonSense/"/>
    
    
    <category term="midi" scheme="https://xautshuanglong.github.io/tags/midi/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg 学习路线图</title>
    <link href="https://xautshuanglong.github.io/2021/06/26/FFmpeg/FFmpeg%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/"/>
    <id>https://xautshuanglong.github.io/2021/06/26/FFmpeg/FFmpeg%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/</id>
    <published>2021-06-26T03:23:27.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>FFmpeg</p></blockquote><span id="more"></span><h2 id="FFmpeg-模块"><a href="#FFmpeg-模块" class="headerlink" title="FFmpeg 模块"></a>FFmpeg 模块</h2>]]></content>
    
    
    <summary type="html">记录成长的脚印</summary>
    
    
    
    <category term="FFmpeg" scheme="https://xautshuanglong.github.io/categories/FFmpeg/"/>
    
    
    <category term="ffmpeg" scheme="https://xautshuanglong.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>QT知识点总结</title>
    <link href="https://xautshuanglong.github.io/2021/04/19/Qt/QT%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>https://xautshuanglong.github.io/2021/04/19/Qt/QT%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2021-04-19T06:55:38.000Z</published>
    <updated>2023-08-12T07:57:58.902Z</updated>
    
    <content type="html"><![CDATA[<p>知识点总结</p><span id="more"></span><h2 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h2><ol><li><p>p_pointer<br><a href="https://wiki.qt.io/D-Pointer/zh">D-Pointer/zh</a></p></li><li><p>q_pointer<br><a href="https://yangliuhui.github.io/2018/04/12/Qt%E4%B8%AD%E7%9A%84Q-D%E4%BB%A5%E5%8F%8AQ-Q%E5%AE%8F%E5%AE%9A%E4%B9%89/">Qt中的Q_D以及Q_Q宏定义</a></p></li><li><p>Qt事件机制<br><a href="https://zhuanlan.zhihu.com/p/31402358">Qt 事件系统浅析 (用 Windows API 描述)</a></p></li></ol><h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><p><a href="https://gitee.com/feiyangqingyun/qtkaifajingyan">飞扬青云/Qt开发经验</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;知识点总结&lt;/p&gt;</summary>
    
    
    
    <category term="QT" scheme="https://xautshuanglong.github.io/categories/QT/"/>
    
    
    <category term="qt" scheme="https://xautshuanglong.github.io/tags/qt/"/>
    
  </entry>
  
  <entry>
    <title>Ninja 学习笔记</title>
    <link href="https://xautshuanglong.github.io/2021/03/25/Tools/ninja%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://xautshuanglong.github.io/2021/03/25/Tools/ninja%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-03-25T05:52:28.000Z</published>
    <updated>2023-08-12T07:57:58.902Z</updated>
    
    <content type="html"><![CDATA[<p>高效构建工具</p><span id="more"></span><h2 id="MSVC"><a href="#MSVC" class="headerlink" title="MSVC"></a>MSVC</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># ninja -t clean -----&gt; 删除生成的目标文件仅 build 指定的目标。</span></span><br><span class="line"><span class="comment"># ninja clean    -----&gt; 显示调用 clean 目标，删除指定的文件。适用于 windows，基于 cmd.exe /c del 删除文件。</span></span><br><span class="line"></span><br><span class="line">ninja_required_version = 1.10.2</span><br><span class="line"></span><br><span class="line">CC = cl.exe</span><br><span class="line">cflags = /w</span><br><span class="line">builddir = Debug</span><br><span class="line">standard = /std:c++latest</span><br><span class="line"></span><br><span class="line">rule compile_HelloWorld</span><br><span class="line">    <span class="built_in">command</span> = <span class="variable">$CC</span> <span class="variable">$standard</span> /EHsc /c <span class="variable">$cflags</span> -MD <span class="variable">$in</span> /Fo <span class="variable">$out</span></span><br><span class="line">    description = --------&gt; Compiling <span class="variable">$in</span> to <span class="variable">$out</span></span><br><span class="line">    depfile = <span class="variable">$out</span>.d</span><br><span class="line">    deps = msvc</span><br><span class="line"></span><br><span class="line">build TestFunc.obj : compile_HelloWorld HelloWorld/TestFunc.cpp</span><br><span class="line">build HelloWorld.obj : compile_HelloWorld HelloWorld/HelloWorld.cpp</span><br><span class="line"></span><br><span class="line">rule link_HelloWorld</span><br><span class="line">   <span class="built_in">command</span> = <span class="variable">$CC</span> <span class="variable">$DEFINES</span> <span class="variable">$INCLUDES</span> <span class="variable">$cflags</span> <span class="variable">$in</span></span><br><span class="line">   description = --------&gt; Linking <span class="variable">$in</span> to <span class="variable">$out</span></span><br><span class="line"></span><br><span class="line">build HelloWorld.exe : link_HelloWorld HelloWorld.obj TestFunc.obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rule clean_cmd</span><br><span class="line">    <span class="built_in">command</span> = cmd.exe /c $</span><br><span class="line">        <span class="keyword">if</span> exist HelloWorld.lib ( del /S HelloWorld.lib ) &amp; $</span><br><span class="line">        <span class="keyword">if</span> exist HelloWorld.exp ( del /S HelloWorld.exp )</span><br><span class="line">    description = --------&gt; Deleting generated files</span><br><span class="line"></span><br><span class="line">build clean: clean_cmd</span><br><span class="line"></span><br><span class="line">default HelloWorld.exe</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;高效构建工具&lt;/p&gt;</summary>
    
    
    
    <category term="Tools" scheme="https://xautshuanglong.github.io/categories/Tools/"/>
    
    
    <category term="ninja" scheme="https://xautshuanglong.github.io/tags/ninja/"/>
    
  </entry>
  
  <entry>
    <title>C++ 虚函数覆盖</title>
    <link href="https://xautshuanglong.github.io/2021/03/23/CPlusPlus/CPP-Virtual%E8%99%9A%E5%87%BD%E6%95%B0%E8%A6%86%E7%9B%96/"/>
    <id>https://xautshuanglong.github.io/2021/03/23/CPlusPlus/CPP-Virtual%E8%99%9A%E5%87%BD%E6%95%B0%E8%A6%86%E7%9B%96/</id>
    <published>2021-03-23T08:01:05.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<ul><li>覆盖失败？</li><li>如何避免覆盖失败？</li><li>缺省参数谁说了算？</li></ul><span id="more"></span><h2 id="虚函数表"><a href="#虚函数表" class="headerlink" title="虚函数表"></a>虚函数表</h2><h2 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> std::string &amp;strShow = <span class="string">&quot;I am Base class !&quot;</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; strShow &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Base display&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Base</span>()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derive</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> std::string &amp;strShow = <span class="string">&quot;I am Derive class !&quot;</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; strShow &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Derive display&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Derive</span>()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Third</span> : <span class="keyword">public</span> Derive</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> std::string &amp;strShow = <span class="string">&quot;I am Third class !&quot;</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; strShow &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Third display&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Third</span>()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Base *pBase = <span class="keyword">new</span> <span class="built_in">Third</span>();</span><br><span class="line">    Derive *pDerive = <span class="keyword">new</span> <span class="built_in">Third</span>();</span><br><span class="line">    Third *pThird = <span class="keyword">new</span> <span class="built_in">Third</span>();</span><br><span class="line">    </span><br><span class="line">    Third *pThirdBase = <span class="built_in">static_cast</span>&lt;Third *&gt;(pBase);</span><br><span class="line">    Third *pThirdDerive = <span class="built_in">static_cast</span>&lt;Third *&gt;(pDerive);</span><br><span class="line"></span><br><span class="line">    Base *pBaseThird = (Base *)pThird;</span><br><span class="line">    Base *pDeriveThird = (Derive *)pThird;</span><br><span class="line"></span><br><span class="line">    pBase-&gt;<span class="built_in">display</span>();</span><br><span class="line">    pDerive-&gt;<span class="built_in">display</span>();</span><br><span class="line">    pThird-&gt;<span class="built_in">display</span>();</span><br><span class="line">    pThirdBase-&gt;<span class="built_in">display</span>();</span><br><span class="line">    pThirdDerive-&gt;<span class="built_in">display</span>();</span><br><span class="line">    pBaseThird-&gt;<span class="built_in">display</span>();</span><br><span class="line">    pDeriveThird-&gt;<span class="built_in">display</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=================================================================================</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">I am Base <span class="keyword">class</span> !</span><br><span class="line">Third display</span><br><span class="line"></span><br><span class="line">I am Derive <span class="keyword">class</span> !</span><br><span class="line">Third display</span><br><span class="line"></span><br><span class="line">I am Third <span class="keyword">class</span> !</span><br><span class="line">Third display</span><br><span class="line"></span><br><span class="line">I am Third <span class="keyword">class</span> !</span><br><span class="line">Third display</span><br><span class="line"></span><br><span class="line">I am Third <span class="keyword">class</span> !</span><br><span class="line">Third display</span><br><span class="line"></span><br><span class="line">I am Base <span class="keyword">class</span> !</span><br><span class="line">Third display</span><br><span class="line"></span><br><span class="line">I am Base <span class="keyword">class</span> !</span><br><span class="line">Third display</span><br></pre></td></tr></table></figure><p><em>注：</em> <strong>根据汇编显示，虚函数调用时，压栈的缺省实参与指针类型（非对象实际类型）保持一致。</strong></p>]]></content>
    
    
    <summary type="html">精益求精</summary>
    
    
    
    <category term="CPP" scheme="https://xautshuanglong.github.io/categories/CPP/"/>
    
    
    <category term="override" scheme="https://xautshuanglong.github.io/tags/override/"/>
    
  </entry>
  
  <entry>
    <title>定时器原理</title>
    <link href="https://xautshuanglong.github.io/2021/02/15/CommonSense/Timer%E5%AE%9A%E6%97%B6%E5%99%A8%E5%8E%9F%E7%90%86/"/>
    <id>https://xautshuanglong.github.io/2021/02/15/CommonSense/Timer%E5%AE%9A%E6%97%B6%E5%99%A8%E5%8E%9F%E7%90%86/</id>
    <published>2021-02-15T15:33:46.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定时器工作原理"><a href="#定时器工作原理" class="headerlink" title="定时器工作原理"></a>定时器工作原理</h2><p>Linux Windows STM32</p><span id="more"></span><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><h3 id="时间轮"><a href="#时间轮" class="headerlink" title="时间轮"></a>时间轮</h3><h3 id="ASIO-小顶堆"><a href="#ASIO-小顶堆" class="headerlink" title="ASIO 小顶堆"></a>ASIO 小顶堆</h3><h3 id="Nginx-红黑树"><a href="#Nginx-红黑树" class="headerlink" title="Nginx 红黑树"></a>Nginx 红黑树</h3><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="/2016/06/06/Linux/Signal%E4%BF%A1%E5%8F%B7/">定时信号</a><br><a href="/2016/11/18/TempRecord/">定时器 WinAPI</a><br><a href="https://blog.csdn.net/fuyuwei2015/article/details/83825851">Java定时器之Timer使用与原理分析</a><br><a href="https://www.jianshu.com/p/67b7c4f74940">Linux C/C++ 定时器的实现原理和使用方法</a><br><a href="http://www.ilovecpp.com/2019/01/16/timer/">Linux下定时器的设计与实现</a><br><a href="https://zhuanlan.zhihu.com/p/84502375">时间轮定时器</a><br><a href="https://cloud.tencent.com/developer/article/1404012">定时器的几种实现方式</a><br><a href="https://www.jianshu.com/p/4c270f81ff22">算法 &amp; 数据结构——时间轮定时器</a><br><a href="http://oneyearago.me/2019/10/24/linux_timer/">Linux定时器时间轮算法</a></p>]]></content>
    
    
    <summary type="html">做守时的程序员</summary>
    
    
    
    <category term="CommonSense" scheme="https://xautshuanglong.github.io/categories/CommonSense/"/>
    
    
    <category term="Time" scheme="https://xautshuanglong.github.io/tags/Time/"/>
    
  </entry>
  
  <entry>
    <title>排序算法汇总</title>
    <link href="https://xautshuanglong.github.io/2021/02/05/Algorithm/Sorting/"/>
    <id>https://xautshuanglong.github.io/2021/02/05/Algorithm/Sorting/</id>
    <published>2021-02-05T09:41:42.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法总结及特性比较</p><span id="more"></span><h2 id="算法特性概览"><a href="#算法特性概览" class="headerlink" title="算法特性概览"></a>算法特性概览</h2><table><thead><tr><th align="center">排序算法</th><th align="center">时间复杂度（平均）</th><th align="center">时间复杂度（最坏）</th><th align="center">时间复杂度（最好）</th><th align="center">空间复杂度</th><th align="center">稳定性</th></tr></thead><tbody><tr><td align="center">插入排序</td><td align="center">O(n<sup>2</sup>)</td><td align="center">O(n<sup>2</sup>)</td><td align="center">O(n)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">希尔排序</td><td align="center">O(n<sup>1.3</sup>)</td><td align="center">O(n<sup>2</sup>)</td><td align="center">O(n)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">选择排序</td><td align="center">O(n<sup>2</sup>)</td><td align="center">O(n<sup>2</sup>)</td><td align="center">O(n<sup>2</sup>)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">堆排序</td><td align="center">O(nlog<sub>2</sub>n)</td><td align="center">O(nlog<sub>2</sub>n)</td><td align="center">O(nlog<sub>2</sub>n)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">冒泡排序</td><td align="center">O(n<sup>2</sup>)</td><td align="center">O(n<sup>2</sup>)</td><td align="center">O(n)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">快速排序</td><td align="center">O(nlog<sub>2</sub>n)</td><td align="center">O(n<sup>2</sup>)</td><td align="center">O(nlog<sub>2</sub>n)</td><td align="center">O(nlog<sub>2</sub>n)</td><td align="center">不稳定</td></tr><tr><td align="center">归并排序</td><td align="center">O(nlog<sub>2</sub>n)</td><td align="center">O(nlog<sub>2</sub>n)</td><td align="center">O(nlog<sub>2</sub>n)</td><td align="center">O(n)</td><td align="center">稳定</td></tr><tr><td align="center">计数排序</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr><tr><td align="center">桶排序</td><td align="center">O(n+k)</td><td align="center">O(n<sup>2</sup>)</td><td align="center">O(n)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr><tr><td align="center">基数排序</td><td align="center">O(n*k)</td><td align="center">O(n*k)</td><td align="center">O(n*k)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr></tbody></table><p><img src="/images/Algorithm/sorting_performance_1.png" alt="十大经典排序算法|菜鸟教程"><br><img src="/images/Algorithm/sorting_performance_2.png" alt="十大经典排序算法|菜鸟教程"></p><h2 id="算法描述与步骤"><a href="#算法描述与步骤" class="headerlink" title="算法描述与步骤"></a>算法描述与步骤</h2><h3 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h3><h3 id="2-插入排序"><a href="#2-插入排序" class="headerlink" title="2. 插入排序"></a>2. 插入排序</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;排序算法总结及特性比较&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://xautshuanglong.github.io/categories/Algorithm/"/>
    
    
    <category term="Sorting" scheme="https://xautshuanglong.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket学习笔记</title>
    <link href="https://xautshuanglong.github.io/2021/01/18/Network/WebSocket%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://xautshuanglong.github.io/2021/01/18/Network/WebSocket%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-01-18T03:15:59.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<p>WebSocket</p><span id="more"></span><h2 id="握手加密原理"><a href="#握手加密原理" class="headerlink" title="握手加密原理"></a>握手加密原理</h2><p>Sec-WebSocket-Key: lNnmFaCQ0C8d0BGOeA5RGA==<br>Sec-WebSocket-Accept: jd5qokdDimNb4Vvtu5guseRRObw=<br>258EAFA5-E914-47DA-95CA-C5AB0DC85B11 GUID 魔数<a href="https://tools.ietf.org/html/rfc6455">RFC 6455</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Sec-WebSocket-Accept = <span class="built_in">base64</span>(sha1(Sec-WebSocket-Key + 258EAFA5-E914-47DA-95CA-C5AB0DC85B11)) // 纯字符串拼接</span><br><span class="line">// 计算中间值保持原有数值（字节数组），切勿转成可见字符，避免计算错误。</span><br><span class="line"></span><br><span class="line">import hashlib</span><br><span class="line">import <span class="built_in">base64</span></span><br><span class="line">base64.b64encode(hashlib.sha1(<span class="string">&#x27;lNnmFaCQ0C8d0BGOeA5RGA==258EAFA5-E914-47DA-95CA-C5AB0DC85B11&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)).digest())</span><br><span class="line"></span><br><span class="line">// b<span class="string">&#x27;jd5qokdDimNb4Vvtu5guseRRObw=&#x27;</span> // 输出内容</span><br></pre></td></tr></table></figure><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p><code>JWT</code>: <code>Json Web Token</code><br><code>JWS</code>: <code>Json Web Signatures</code><br><code>JWE</code>: <code>Json Web Encryption</code><br><code>JWK</code>: <code>Json Web Keys</code><br><code>JWA</code>: <code>Json Web Algorithms</code></p><p>参考资料：<br><a href="https://www.jianshu.com/p/50ade6f2e4fd">JWT、JWS 与 JWE</a><br><a href="https://libwebsockets.org/git/libwebsockets/tree/lib/jose">LibWebsockets JOSE</a><br><a href="https://www.jianshu.com/p/576dbf44b2ae">什么是 JWT</a><br><a href="https://zhuanlan.zhihu.com/p/86937325">五分钟带你了解啥是JWT</a><br><a href="https://jwt.io/">JWT 工具</a></p><h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><h3 id="QWebSocket"><a href="#QWebSocket" class="headerlink" title="QWebSocket"></a>QWebSocket</h3><h3 id="libwebsockets"><a href="#libwebsockets" class="headerlink" title="libwebsockets"></a>libwebsockets</h3><ol><li><p>lejp libwebsockets embedded json parser<br>可以解析部分目标字符串，若前部分解析没有语法错误，可以继续传入剩下数据，完成后续解析。<br>libwebsockets-4.1.6 test-lejp.c 使用同一个 <code>lejp_ctx</code> 进行多次解析动作时出问题；首次解析没有问题，在完成解析后或出错后，继续解析新的 json 数据，则会报错，<code>lejp_parse</code> 返回 -21。<br>经调试排除，<code>lejp\_ctx.st.s</code> 中记录了上一次解析时记录下的结束符号，导致新的 json 数据到来时，遇到开始符号与上次的完成符号不匹配，返回错误<code>LEJP_REJECT_MP_C_OR_E_NEITHER</code>(-21)。<br>规避问题方法：每次完成一次完整解析（成功或失败都行），清除<code>lejp_ctx</code>中的信息，然后进行下一次解析动作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加清理上下文函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">lejp_reset</span><span class="params">(<span class="keyword">struct</span> lejp_ctx *ctx)</span></span><br><span class="line">&#123;</span><br><span class="line">    ctx-&gt;st[<span class="number">0</span>].s = <span class="number">0</span>;</span><br><span class="line">    ctx-&gt;st[<span class="number">0</span>].p = <span class="number">0</span>;</span><br><span class="line">    ctx-&gt;st[<span class="number">0</span>].i = <span class="number">0</span>;</span><br><span class="line">    ctx-&gt;st[<span class="number">0</span>].b = <span class="number">0</span>;</span><br><span class="line">    ctx-&gt;sp = <span class="number">0</span>;</span><br><span class="line">    ctx-&gt;ipos = <span class="number">0</span>;</span><br><span class="line">    ctx-&gt;outer_array = <span class="number">0</span>;</span><br><span class="line">    ctx-&gt;path_match = <span class="number">0</span>;</span><br><span class="line">    ctx-&gt;path_stride = <span class="number">0</span>;</span><br><span class="line">    ctx-&gt;path[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    ctx-&gt;line = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ctx-&gt;pst_sp = <span class="number">0</span>;</span><br><span class="line">    ctx-&gt;pst[<span class="number">0</span>].user = <span class="literal">NULL</span>;</span><br><span class="line">    ctx-&gt;pst[<span class="number">0</span>].ppos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 callback 中适当位置执行上下文清理</span></span><br><span class="line"><span class="type">static</span> <span class="type">signed</span> <span class="type">char</span> <span class="title function_">cb</span><span class="params">(<span class="keyword">struct</span> lejp_ctx *ctx, <span class="type">char</span> reason)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>], *p = buf, *end = &amp;buf[<span class="keyword">sizeof</span>(buf)];</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; ctx-&gt;sp; n++) &#123; *p++ = <span class="string">&#x27; &#x27;</span>; &#125;</span><br><span class="line">    *p = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (reason &amp; LEJP_FLAG_CB_IS_VALUE)</span><br><span class="line">    &#123;</span><br><span class="line">        p += lws_snprintf(p, p - end, <span class="string">&quot;   value &#x27;%s&#x27; &quot;</span>, ctx-&gt;buf);</span><br><span class="line">        <span class="keyword">if</span> (ctx-&gt;ipos)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            p += lws_snprintf(p, p - end, <span class="string">&quot;(array indexes: &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; ctx-&gt;ipos; n++)</span><br><span class="line">            &#123;</span><br><span class="line">                p += lws_snprintf(p, p - end, <span class="string">&quot;%d &quot;</span>, ctx-&gt;i[n]);</span><br><span class="line">            &#125;</span><br><span class="line">            p += lws_snprintf(p, p - end, <span class="string">&quot;) &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        lwsl_notice(<span class="string">&quot;%s (%s)\r\n&quot;</span>, buf, reason_names[(<span class="type">unsigned</span> <span class="type">int</span>)(reason) &amp; (LEJP_FLAG_CB_IS_VALUE - <span class="number">1</span>)]);</span><br><span class="line">        (<span class="type">void</span>)reason_names;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (reason) &#123;</span><br><span class="line">    <span class="keyword">case</span> LEJPCB_COMPLETE:</span><br><span class="line">        lwsl_notice(<span class="string">&quot;%sParsing Completed (LEJPCB_COMPLETE)\n&quot;</span>, buf);</span><br><span class="line">        lejp_reset(ctx);<span class="comment">// Shuanglong</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> LEJPCB_PAIR_NAME:</span><br><span class="line">        lwsl_notice(<span class="string">&quot;%spath: &#x27;%s&#x27; (LEJPCB_PAIR_NAME)\n&quot;</span>, buf, ctx-&gt;path);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> LEJPCB_FAILED:</span><br><span class="line">        lwsl_notice(<span class="string">&quot;Parsing Failed ......\n&quot;</span>);</span><br><span class="line">        lejp_reset(ctx);<span class="comment">// Shuanglong</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>test-lejp.c 中 <code>lws_snprintf</code> 缓冲区大小计算为：当前指针位置减去缓冲区末尾指针，存在大小端问题，导致部分格式化字符串无法正常输出。<br>解决方法：判断地址大小，用大的减去小的，确保计算出来的缓冲区大小为非负数，再去做格式化。</p></li><li><p>CMake 生成 VS2019 解决方案，OpenSSL 配置，openssl.exe 生成证书时需要 openssl.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// libwebsockets-4.1.6/lib/tls/CMakeLists.txt</span><br><span class="line">// Win32 环境下可能无法找到 openssl.conf 配置文件（手动编译 OpenSSL），Linux 环境安装 OpenSSL 后会有 openssl.conf，可在默认情况下找到。</span><br><span class="line">// CMake GUI 中增加文件路径变量 OPENSSL_CONFIG_FILE 并定位到 openssl.conf 全路径。</span><br><span class="line"></span><br><span class="line">file(WRITE <span class="string">&quot;<span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/openssl_input.txt&quot;</span></span><br><span class="line">    <span class="string">&quot;GB\n&quot;</span></span><br><span class="line">    <span class="string">&quot;Erewhon\n&quot;</span></span><br><span class="line">    <span class="string">&quot;All around\n&quot;</span></span><br><span class="line">    <span class="string">&quot;libwebsockets-test\n&quot;</span></span><br><span class="line">    <span class="string">&quot;localhost\n&quot;</span></span><br><span class="line">    <span class="string">&quot;none@invalid.org\n\n&quot;</span></span><br><span class="line">    )</span><br><span class="line"><span class="comment"># The &quot;type&quot; command is a bit picky with paths.</span></span><br><span class="line">file(TO_NATIVE_PATH <span class="string">&quot;<span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/openssl_input.txt&quot;</span> OPENSSL_INPUT_WIN_PATH)</span><br><span class="line">message(<span class="string">&quot;OPENSSL_INPUT_WIN_PATH = <span class="variable">$&#123;OPENSSL_INPUT_WIN_PATH&#125;</span>&quot;</span>)</span><br><span class="line">message(<span class="string">&quot;cmd = \&quot;<span class="variable">$&#123;OPENSSL_EXECUTABLE&#125;</span>\&quot; req -new -newkey rsa:2048 -days 10000 -nodes -x509 -keyout \&quot;<span class="variable">$&#123;TEST_SERVER_SSL_KEY&#125;</span>\&quot; -out \&quot;<span class="variable">$&#123;TEST_SERVER_SSL_CERT&#125;</span>\&quot; -config <span class="variable">$&#123;OPENSSL_CONFIG_FILE&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">execute_process(</span><br><span class="line">    COMMAND cmd /c <span class="built_in">type</span> <span class="string">&quot;<span class="variable">$&#123;OPENSSL_INPUT_WIN_PATH&#125;</span>&quot;</span></span><br><span class="line">    COMMAND <span class="string">&quot;<span class="variable">$&#123;OPENSSL_EXECUTABLE&#125;</span>&quot;</span> req -new -newkey rsa:2048 -days 10000 -nodes -x509 -keyout <span class="string">&quot;<span class="variable">$&#123;TEST_SERVER_SSL_KEY&#125;</span>&quot;</span> -out <span class="string">&quot;<span class="variable">$&#123;TEST_SERVER_SSL_CERT&#125;</span>&quot;</span> -config <span class="variable">$&#123;OPENSSL_CONFIG_FILE&#125;</span> RESULT_VARIABLE OPENSSL_RETURN_CODE</span><br><span class="line">    OUTPUT_QUIET ERROR_QUIET)</span><br><span class="line"></span><br><span class="line">message(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>libwebsockets CMake 生成 JOSE examples 工程 CMake GUI 勾选 <code>LWS_WITH_JOSE</code>。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;WebSocket&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://xautshuanglong.github.io/categories/Network/"/>
    
    
    <category term="websocket" scheme="https://xautshuanglong.github.io/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>基础概念澄清</title>
    <link href="https://xautshuanglong.github.io/2021/01/15/CPlusPlus/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%BE%84%E6%B8%85/"/>
    <id>https://xautshuanglong.github.io/2021/01/15/CPlusPlus/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%BE%84%E6%B8%85/</id>
    <published>2021-01-15T02:25:03.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<p>概念很重要</p><span id="more"></span><h2 id="函数指针类型与变量"><a href="#函数指针类型与变量" class="headerlink" title="函数指针类型与变量"></a>函数指针类型与变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typedef void(*pFunc)(int); // 此处是一个指针类型</span><br><span class="line">        void(*pFunc)(int); // 此处是一个指针变量</span><br></pre></td></tr></table></figure><h2 id="标准文件描述符"><a href="#标准文件描述符" class="headerlink" title="标准文件描述符"></a>标准文件描述符</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 ----- 标准输入</span><br><span class="line">1 ----- 标准输出</span><br><span class="line">2 ----- 标准错误</span><br></pre></td></tr></table></figure><h2 id="Win32-线程管理"><a href="#Win32-线程管理" class="headerlink" title="Win32 线程管理"></a>Win32 线程管理</h2><ol><li><p>CreateThread  –&gt;  Win32 API</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Creates a thread to execute within the virtual address space of the calling process.</span><br><span class="line">To create a thread that runs <span class="keyword">in</span> the virtual address space of another process,</span><br><span class="line">use the CreateRemoteThread <span class="keyword">function</span>.</span><br><span class="line"></span><br><span class="line">其他相关：</span><br><span class="line">    CreateRemoteThread  OpenThread  GetCurrentThread  ExitThread</span><br><span class="line">    GetExitCodeThread  GetThreadPriority  SetThreadPriority  CloseHandle</span><br></pre></td></tr></table></figure><p>参考文档：<br><a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createthread">https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createthread</a><br>示例程序：<br><a href="https://docs.microsoft.com/en-us/windows/win32/procthread/creating-threads">https://docs.microsoft.com/en-us/windows/win32/procthread/creating-threads</a><br><a href="https://www.codeproject.com/articles/13557/creating-threads-using-the-createthread-api">https://www.codeproject.com/articles/13557/creating-threads-using-the-createthread-api</a></p></li><li><p>AfxBeginThread  –&gt; MFC</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AfxBeginThread creates a new CWinThread object, calls its CreateThread <span class="keyword">function</span> to start executing the thread, </span><br><span class="line">and returns a pointer to the thread. Checks are made throughout the procedure to make sure all objects are </span><br><span class="line">deallocated properly should any part of the creation fail. To end the thread, </span><br><span class="line">call AfxEndThread from within the thread, or <span class="built_in">return</span> from the controlling <span class="keyword">function</span> of the worker thread.</span><br></pre></td></tr></table></figure><p>示例程序：<br><a href="https://docs.microsoft.com/en-us/cpp/mfc/reference/csocket-class?view=msvc-160#attach">https://docs.microsoft.com/en-us/cpp/mfc/reference/csocket-class?view=msvc-160#attach</a><br>官方文档：<br><a href="https://docs.microsoft.com/en-us/cpp/mfc/reference/application-information-and-management?view=msvc-160#afxbeginthread">https://docs.microsoft.com/en-us/cpp/mfc/reference/application-information-and-management?view=msvc-160#afxbeginthread</a></p></li><li><p>_beginthread _beginthreadex  –&gt; C run-time library (CRT) </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">A thread <span class="keyword">in</span> an executable that calls the C run-time library (CRT) </span><br><span class="line">should use the _beginthreadex and _endthreadex <span class="built_in">functions</span> </span><br><span class="line"><span class="keyword">for</span> thread management rather than CreateThread and ExitThread;</span><br><span class="line">this requires the use of the multithreaded version of the CRT.</span><br><span class="line"></span><br><span class="line">The _beginthread <span class="keyword">function</span> creates a thread </span><br><span class="line">that begins execution of a routine at start_address. </span><br><span class="line">The routine at start_address must use the __cdecl (<span class="keyword">for</span> native code) or __clrcall (<span class="keyword">for</span> managed code) </span><br><span class="line">calling convention and should have no <span class="built_in">return</span> value. </span><br><span class="line">When the thread returns from that routine, it is terminated automatically.</span><br><span class="line"></span><br><span class="line">_beginthreadex resembles the Win32 CreateThread API more closely than _beginthread does.</span><br><span class="line">_beginthreadex differs from _beginthread <span class="keyword">in</span> the following ways:</span><br><span class="line"></span><br><span class="line">  1) _beginthreadex has three additional parameters: initflag, Security, and threadaddr. </span><br><span class="line">     The new thread can be created <span class="keyword">in</span> a suspended state, with a specified security, </span><br><span class="line">     and can be accessed by using thrdaddr, <span class="built_in">which</span> is the thread identifier.</span><br><span class="line"></span><br><span class="line">  2) The routine at start_address that<span class="string">&#x27;s passed to _beginthreadex must use the __stdcall (for native code) </span></span><br><span class="line"><span class="string">     or __clrcall (for managed code) calling convention and must return a thread exit code.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  3) _beginthreadex returns 0 on failure, rather than -1L.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  4) A thread that&#x27;</span>s created by using _beginthreadex is terminated by a call to _endthreadex.</span><br><span class="line"></span><br><span class="line">_endthread automatically closes the thread handle, whereas _endthreadex does not. </span><br><span class="line">Therefore, when you use _beginthread and _endthread, <span class="keyword">do</span> not explicitly close the thread handle by calling the Win32 CloseHandle API.</span><br><span class="line">This behavior differs from the Win32 ExitThread API.</span><br></pre></td></tr></table></figure><p>官方文档：<br><a href="https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/beginthread-beginthreadex?view=msvc-160">https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/beginthread-beginthreadex?view=msvc-160</a><br>参考网址：<br><a href="https://docs.microsoft.com/en-us/cpp/parallel/multithreading-support-for-older-code-visual-cpp?view=msvc-160">https://docs.microsoft.com/en-us/cpp/parallel/multithreading-support-for-older-code-visual-cpp?view=msvc-160</a><br><a href="https://docs.microsoft.com/en-us/cpp/parallel/multithreading-terminating-threads?view=msvc-160">https://docs.microsoft.com/en-us/cpp/parallel/multithreading-terminating-threads?view=msvc-160</a></p></li><li><p>std::thread</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="Linux-线程管理"><a href="#Linux-线程管理" class="headerlink" title="Linux  线程管理"></a>Linux  线程管理</h2>]]></content>
    
    
    <summary type="html">基础概念澄清</summary>
    
    
    
    <category term="CPP" scheme="https://xautshuanglong.github.io/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows环境下代码签名</title>
    <link href="https://xautshuanglong.github.io/2020/11/27/Windows/win32%E4%BB%A3%E7%A0%81%E7%AD%BE%E5%90%8D/"/>
    <id>https://xautshuanglong.github.io/2020/11/27/Windows/win32%E4%BB%A3%E7%A0%81%E7%AD%BE%E5%90%8D/</id>
    <published>2020-11-27T09:12:45.000Z</published>
    <updated>2023-08-12T07:57:58.902Z</updated>
    
    <content type="html"><![CDATA[<p>SPC — 软件发布者证书</p><span id="more"></span><h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">makecert -r -pe -n <span class="string">&quot;CN=Code Signature CA&quot;</span> -ss CA -sr CurrentUser -a sha256 -cy authority -sky signature -eku 1.3.6.1.5.5.7.3.3 -sv CodeSignatureCA.pvk CodeSignatureCA.cer</span><br><span class="line">// 此处选择手动安装于 本地计算机 受信任的根证书颁发机构</span><br><span class="line">certutil -user -addstore Root code_signature_ca.cer</span><br><span class="line">makecert -pe -n <span class="string">&quot;CN=Code Signature&quot;</span> -a sha256 -cy end -sky signature -ic CodeSignatureCA.cer -iv CodeSignatureCA.pvk -sv CodeSignatureSPC.pvk CodeSignatureSPC.cer</span><br><span class="line">pvk2pfx -pvk code_signature.pvk -po password -spc code_signature.cer -pfx code_signature.pfx</span><br><span class="line">// password 在生成 pfx 文件时指定</span><br><span class="line">// 时间戳用于设置当前签名时间以及校验是否在证书可用时间范围内</span><br><span class="line">signtool sign /v /fd SHA256 /p password /f CodeSignatureSPC.pfx /t http://timestamp.globalsign.com/scripts/timstamp.dll Setup.msi</span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">New-SelfSignedCertificate -Type Custom -Subject <span class="string">&quot;CN=Contoso Software, O=Contoso Corporation, C=US&quot;</span> -KeyUsage DigitalSignature -FriendlyName <span class="string">&quot;Your friendly name goes here&quot;</span> -CertStoreLocation <span class="string">&quot;Cert:\CurrentUser\My&quot;</span> -TextExtension @(<span class="string">&quot;2.5.29.37=&#123;text&#125;1.3.6.1.5.5.7.3.3&quot;</span>, <span class="string">&quot;2.5.29.19=&#123;text&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">Set-Location Cert:\CurrentUser\My</span><br><span class="line">Get-ChildItem | Format-Table Subject, Thumbprint</span><br><span class="line"></span><br><span class="line">// Thumbprint 根据 Get-ChildItem 返回的指纹来定</span><br><span class="line">// Export-PfxCertificate -cert <span class="string">&quot;Cert:\CurrentUser\My\&lt;Certificate Thumbprint&gt;&quot;</span> -FilePath &lt;FilePath&gt;.pfx -Password <span class="variable">$password</span></span><br><span class="line"><span class="variable">$password</span> = ConvertTo-SecureString -String password -Force -AsPlainText</span><br><span class="line">Export-PfxCertificate -cert <span class="string">&quot;Cert:\CurrentUser\My\E19B89242AA47DA6F8640AC98F7AE4DA62E147F5&quot;</span> -FilePath E:\\test.pfx -Password <span class="variable">$password</span></span><br></pre></td></tr></table></figure><h3 id="证书安装"><a href="#证书安装" class="headerlink" title="证书安装"></a>证书安装</h3><p>代码签名证书需要被安装到<code>受信任的根证书颁发机构</code>才能接受被该证书签名的软件或脚本。<br>方式一：生成的证书本来就是文件形式，在目标机器上双击安装即可。<br>方式二：生成的证书是存到系统中的，需要导出成证书文件后安装到目标机器上。<br>安装步骤：双击证书文件(*.cer) -&gt; 安装证书 -&gt; 当前用户/本地计算机 -&gt; 将所有的证书都放入下列存储 浏览 -&gt; 受信任的根证书颁发机构 -&gt; 确定</p><h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><p><a href="https://blog.csdn.net/weixin_43982401/article/details/104437205">如何在Windows上为代码签名创建自签名证书</a><br><a href="https://docs.microsoft.com/zh-cn/windows/msix/package/create-certificate-package-signing">为程序包签名创建证书</a><br><a href="https://docs.microsoft.com/zh-cn/windows-hardware/drivers/install/trusted-root-certification-authorities-certificate-store">受信任的根证书颁发机构证书存储</a><br><a href="https://docs.microsoft.com/zh-cn/previous-versions/dotnet/netframework-4.0/8s9b9yaz&#40;v=vs.100&#41;">SignTool.exe（签名工具）</a><br><a href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/makecert">MakeCert</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;SPC — 软件发布者证书&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="https://xautshuanglong.github.io/categories/Windows/"/>
    
    
    <category term="signature" scheme="https://xautshuanglong.github.io/tags/signature/"/>
    
  </entry>
  
  <entry>
    <title>ColorSpace颜色空间</title>
    <link href="https://xautshuanglong.github.io/2020/07/28/CommonSense/ColorSpace%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4/"/>
    <id>https://xautshuanglong.github.io/2020/07/28/CommonSense/ColorSpace%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4/</id>
    <published>2020-07-28T03:47:13.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<p><code>颜色空间</code>也称<code>彩色模型</code>（又称<code>彩色空间</code>或<code>彩色系统</code>），它的用途是在某些标准下用通常可接受的方式对色彩加以说明。</p><blockquote><p>本质上，彩色模型是坐标系统和子空间的阐述。<br>位于系统的每种颜色都有单个点表示。<br>采用的大多数颜色模型都是面向硬件或面向应用的。<br>颜色空间从提出到现在已经有上百种，大部分只是局部的改变或专用于某一领域。</p></blockquote><span id="more"></span><h2 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h2><p><code>RGB</code>是通过红绿蓝三原色来描述颜色的颜色空间，R=<code>Red</code>、G=<code>Green</code>、B=<code>Blue</code>。<br>基于颜色的加法混色原理，从黑色不断叠加Red，Green，Blue的颜色，最终可以得到白色光。<br>将R、G、B三个通道作为笛卡尔坐标系中的X、Y、Z轴，就得到了一种对于颜色的空间描述。</p><p>在计算机中编程RGB每一个分量值都用8位（bit）表示，可以产生256<em>256</em>256=16777216中颜色，这就是经常所说的<code>24位真彩色</code>。</p><h2 id="CMY-CMYK"><a href="#CMY-CMYK" class="headerlink" title="CMY(CMYK)"></a>CMY(CMYK)</h2><p>基于颜色减法混色原理的颜色模型。</p><h2 id="HSV"><a href="#HSV" class="headerlink" title="HSV"></a>HSV</h2><p><code>HSV</code>颜色空间是根据颜色的直观特性由A.R.Smith在1978年创建的一种颜色空间, 也称<code>六角锥体模型(Hexcone Model)</code>。<code>RGB</code>和<code>CMY</code>颜色模型都是面向硬件的，而<code>HSV</code>（Hue Saturation Value）颜色模型是面向用户的。<br>这个模型中颜色的参数分别是：色调（H：hue），饱和度（S：saturation），亮度（V：value）。<br>这是根据人观察色彩的生理特征而提出的颜色模型（人的视觉系统对亮度的敏感度要强于色彩值，这也是为什么计算机视觉中通常使用灰度即亮度图像来处理的原因之一）。<br>色调H：用角度度量，取值范围为0°～360°，从红色开始按逆时针方向计算，红色为0°，绿色为120°,蓝色为240°。它们的补色是：黄色为60°，青色为180°,品红为300°；<br>饱和度S：取值范围为0.0～1.0；<br>亮度V：取值范围为0.0(黑色)～1.0(白色)。</p><h2 id="HSL"><a href="#HSL" class="headerlink" title="HSL"></a>HSL</h2><p>与<code>HSV</code>类似，把<code>V: Value</code>换成<code>L: Lightness</code>。<br><code>HSV</code>可以被认为是颜色的倒圆锥体（黑色在下顶点，白色在上底面圆心）。<br><code>HSL</code>可以被认为是一个双圆锥体和圆球体（白色在上顶点，黑色是下顶点，最大横切面的圆心是灰色）。</p><h2 id="YUV"><a href="#YUV" class="headerlink" title="YUV"></a>YUV</h2><p>主要用于优化彩色视频信号的传输，使其向后相容老式黑白电视。<br>与<code>RGB</code>视频信号传输相比，它最大的优点在于只需占用极少的频宽（<code>RGB</code>要求三个独立的视频信号同时传输）。<br>其中：<br><code>Y</code>表示明亮度（<code>Luminance</code>或<code>Luma</code>），也就是灰阶值；<br><code>U</code>和<code>V</code>表示的则是色度（<code>Chrominance</code>或<code>Chroma</code>），作用是描述影像色彩及饱和度，用于指定像素的颜色。<br>采用<code>YUV</code>色彩空间的重要性是它的亮度信号<code>Y</code>和色度信号<code>U</code>、<code>V</code>是分离的。如果只有<code>Y</code>信号分量而没有<code>U</code>、<code>V</code>分量，那么这样表示的图像就是黑白灰度图像。<br>彩色电视采用<code>YUV</code>空间正是为了用亮度信号<code>Y</code>解决彩色电视机与黑白电视机的兼容问题，使黑白电视机也能接收彩色电视信号。<br><code>亮度</code>是透过<code>RGB</code>输入信号来建立的，方法是将<code>RGB</code>信号的特定部分叠加到一起。<br><code>色度</code>则定义了颜色的两个方面─色调与饱和度，分别用<code>Cr</code>和<code>Cb</code>来表示。其中，<code>Cr</code>反映了<code>RGB</code>输入信号红色部分与<code>RGB</code>信号亮度值之间的差异。而<code>Cb</code>反映的是<code>RGB</code>输入信号蓝色部分与<code>RGB</code>信号亮度值之同的差异。<br><code>YCbCr</code>其实是<code>YUV</code>经过缩放和偏移的翻版。</p><p><code>YUV</code>和<code>RGB</code>相互转化公式：（RGB取值范围 0~255）</p><p>版本一<br>$$<br>\begin{cases}<br>\begin{align}<br>Y &amp;= &amp;0.299*R + 0.587*G + 0.114*B \\<br>U &amp;= &amp;-0.147*R - 0.289*G + 0.436*B \\<br>V &amp;= &amp;0.615*R - 0.515*G - 0.100*B<br>\end{align}<br>\end{cases}<br>$$</p><p>$$<br>\begin{cases}<br>R &amp;= Y + 1.14*V \\<br>G &amp;= Y + 0.39*U - 0.58*V \\<br>B &amp;= Y + 2.03*U<br>\end{cases}<br>$$</p><p>版本二<br>$$<br>\begin{cases}<br>\begin{align}<br>Y &amp;= &amp; 0.299   &amp;*R + &amp; 0.587  &amp;*G + &amp; 0.114  &amp;*B \\<br>U &amp;= &amp; -0.1687 &amp;*R - &amp; 0.3313 &amp;*G + &amp; 0.5    &amp;*B + 128 \\<br>V &amp;= &amp; 0.5     &amp;*R - &amp; 0.4187 &amp;*G - &amp; 0.0813 &amp;*B + 128<br>\end{align}<br>\end{cases}<br>$$</p><p>$$<br>\begin{cases}<br>R &amp;= Y + 1.40200*(Cr - 128) \\<br>G &amp;= Y - 0.34414*(Cb - 128) - 0.71414*(Cr - 128) \\<br>B &amp;= Y + 1.77200*(Cb - 128)<br>\end{cases}<br>$$</p><h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><p><a href="https://blog.csdn.net/weiweigfkd/article/details/20898937">颜色空间：RGB，CMY，HSV，HSL，Lab详解</a><br><a href="https://zhuanlan.zhihu.com/p/28741691">数字图像处理之6大颜色空间</a></p><h2 id="参考网址-1"><a href="#参考网址-1" class="headerlink" title="参考网址"></a>参考网址</h2><p><a href="https://blog.csdn.net/weiweigfkd/article/details/20898937">颜色空间：RGB，CMY，HSV，HSL，Lab详解</a><br><a href="https://zhuanlan.zhihu.com/p/28741691">数字图像处理之6大颜色空间</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;颜色空间&lt;/code&gt;也称&lt;code&gt;彩色模型&lt;/code&gt;（又称&lt;code&gt;彩色空间&lt;/code&gt;或&lt;code&gt;彩色系统&lt;/code&gt;），它的用途是在某些标准下用通常可接受的方式对色彩加以说明。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本质上，彩色模型是坐标系统和子空间的阐述。&lt;br&gt;位于系统的每种颜色都有单个点表示。&lt;br&gt;采用的大多数颜色模型都是面向硬件或面向应用的。&lt;br&gt;颜色空间从提出到现在已经有上百种，大部分只是局部的改变或专用于某一领域。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CommonSense" scheme="https://xautshuanglong.github.io/categories/CommonSense/"/>
    
    
  </entry>
  
  <entry>
    <title>Nginx 编译与调试</title>
    <link href="https://xautshuanglong.github.io/2020/07/25/Web/Nginx%E7%BC%96%E8%AF%91%E4%B8%8E%E8%B0%83%E8%AF%95/"/>
    <id>https://xautshuanglong.github.io/2020/07/25/Web/Nginx%E7%BC%96%E8%AF%91%E4%B8%8E%E8%B0%83%E8%AF%95/</id>
    <published>2020-07-25T04:45:34.000Z</published>
    <updated>2023-08-12T07:57:58.902Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx 简介</p><span id="more"></span><h2 id="Win32-VS2019"><a href="#Win32-VS2019" class="headerlink" title="Win32 VS2019"></a>Win32 VS2019</h2><p>通过命令行调用 vcvars64.bat 初始化 VC 环境变量，再通过命令行拉起 msys2，传递环境变量，调整msys2环境变量 path，确保调用到windows环境中的相关工具，如：perl。</p><h2 id="Linux-Ubuntu"><a href="#Linux-Ubuntu" class="headerlink" title="Linux Ubuntu"></a>Linux Ubuntu</h2><h2 id="DTrace-工具"><a href="#DTrace-工具" class="headerlink" title="DTrace 工具"></a>DTrace 工具</h2><p><a href="https://nginx.org/en/docs/nginx_dtrace_pid_provider.html#see_also">Debuging with DTrace</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Nginx 简介&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="https://xautshuanglong.github.io/categories/Web/"/>
    
    
    <category term="nginx" scheme="https://xautshuanglong.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>LDAP-轻量级目录访问协议</title>
    <link href="https://xautshuanglong.github.io/2020/07/22/Network/LDAP-%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE/"/>
    <id>https://xautshuanglong.github.io/2020/07/22/Network/LDAP-%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-07-22T15:10:24.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="协议简介"><a href="#协议简介" class="headerlink" title="协议简介"></a>协议简介</h2><span id="more"></span><h2 id="四大模型"><a href="#四大模型" class="headerlink" title="四大模型"></a>四大模型</h2><ul><li>信息模型</li><li>命名模型</li><li>功能模型</li><li>安全模型</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;协议简介&quot;&gt;&lt;a href=&quot;#协议简介&quot; class=&quot;headerlink&quot; title=&quot;协议简介&quot;&gt;&lt;/a&gt;协议简介&lt;/h2&gt;</summary>
    
    
    
    <category term="Network" scheme="https://xautshuanglong.github.io/categories/Network/"/>
    
    
    <category term="LDAP" scheme="https://xautshuanglong.github.io/tags/LDAP/"/>
    
  </entry>
  
  <entry>
    <title>WSL Windows子系统安装Linux</title>
    <link href="https://xautshuanglong.github.io/2020/03/04/Linux/WindowsSubsystemLinux/"/>
    <id>https://xautshuanglong.github.io/2020/03/04/Linux/WindowsSubsystemLinux/</id>
    <published>2020-03-04T03:20:01.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<p><strong>WSL 学习路上：</strong></p><ul><li>配置说明<br><code>访问主机代理软件</code></li><li>问题解决<br><code>文本显示</code>、<code>局域网 SSH</code>、<code>文件系统资源共享</code>、<code>版本升级 WSL2</code></li></ul><span id="more"></span><h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p>代理那些事</p><p>git config core.longpaths true<br>git config http.proxy <a href="http://127.0.0.1:10809/">http://127.0.0.1:10809</a><br>git config https.proxy <a href="https://127.0.0.1:10809/">https://127.0.0.1:10809</a></p><p>CMD 管理员权限系统环境</p><p>netsh winhttp show proxy<br>netsh winhttp set proxy<br>netsh winhttp reset proxy</p><p>CMD 运行环境</p><p>set http_proxy=<a href="http://127.0.0.1:10809/">http://127.0.0.1:10809</a><br>set https_proxy=<a href="https://127.0.0.1:10809/">https://127.0.0.1:10809</a><br>set socks5_proxy=socks5://127.0.0.1:10808</p><p>特殊情况下无法 TLS 协议 <a href="https://xxx.xxx.xxx/">https://xxx.xxx.xxx</a> 下载资源，尝试将 https 替换为 socks5<br>set https_proxy=socks5://127.0.0.1:10808</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  控制台字体设置</div><span class="label label-danger">问题描述</span><p>wsl 控制台窗口设置字体为 consolas，但是通过 vim 看源码时，字体又变回原默认字体，奇丑无比。</p><span class="label label-success">解决方案</span><p>修改注册表：<code>\HKEY_CURRENT_USER\Console\C:_Program Files_WindowsApps_CanonicalGroupLimited.Ubuntu18.04onWindows_1804.2018.817.0_x64__79rhkp1fndgsc_ubuntu1804.exe</code><br>添加：<code>CodePage</code> 子项，数据类型<code>DWORD</code>，值<code>0x1b5</code><br>参考网址：<a href="https://blog.csdn.net/MobiuX/article/details/82194028">WSL中字体意外变化的解决方法</a></p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  WSL 内核升级到 WSL2</div><span class="label label-danger">问题描述</span><p>通过 go-delve 调试 golang 代码，无法显示交互提示，VSCODE 也无法使用调试功能。</p><span class="label label-success">解决方案</span><p>将 WSL1 升级到 WSL2<br>参考网址：<a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">wsl2 安装（wsl 升级）</a></p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  从其他主机通过 SSH 连接本机 WSL</div><span class="label label-danger">问题描述</span><p>即使 sshd_config 中配置监听地址为<code>0.0.0.0</code>，netstat.exe 查看到的也是<code>127.0.0.1</code>，因此默认情况下无法通过其他主机进行连接。<br>wsl 中 ifconfig eth0 为随机分配地址。</p><span class="label label-success">解决方案</span><p>通过 powershell 开启本地代理，并确认防火墙放行相关端口，实战中对 <code>4022</code> 端口添加例外。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenport=4022 listenaddress=0.0.0.0 connectport=22 connectaddress=127.0.0.1</span><br><span class="line">netsh interface portproxy delete v4tov4 listenport=4022 listenaddress=0.0.0.0</span><br><span class="line">netsh interface portproxy show all</span><br></pre></td></tr></table></figure><p>参考网址：<a href="https://docs.microsoft.com/en-us/windows/wsl/compare-versions">Comparing WSL 1 and WSL 2</a>，<a href="https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions">比较 WSL 1 和 WSL 2</a></p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  从 WSL 访问主机</div><span class="label label-danger">问题描述</span><p>无法从 WSL 中访问主机应用（代理软件）<br>127.0.0.1 不能访问宿主机，通过宿主机内网 IP 也不能访问宿主机。<br>通过 windows 网络适配器管理可以看到名为 vEthernet(WSL) 的适配器 <code>Hyper-V Virtrual Ethernet Adapter</code>，查看属性得知使用了静态 IP 和特定的子网掩码，使用该 IP 可实现从 WSL 访问主机。也可在 WSL 中通过命令行查看：<code>cat /etc/resolve.conf</code>。</p><span class="label label-success">解决方案</span><p>找对IP，配置防火墙规则。<br>参考网址：<a href="https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions">比较 WSL 1 和 WSL 2 —— 访问网络应用程序</a></p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  WSL2 使用虚拟硬件磁盘`VHD`来存储 Linux 文件。</div><span class="label label-danger">问题描述</span><p>不能从 windows 资源管理器浏览到 wsl 安装目录下的文件系统，出现<code>ext4.vhdx</code>。</p><span class="label label-success">解决方案</span><p>WSL2 VHD 使用 ext4 文件系统，支持扩展硬件磁盘的大小。<br>在 Windows 资源管理器导航栏输入：<code>\\wsl$\Ubuntu-18.04\home\shuanglong</code><br>也可通过 shell 进入目标文件夹后，调用 Windows 资源管理器：<code>explorer.exe .</code>。</p><pre><code>You can access your Linux root file system with Windows apps and tools like File Explorer. Try opening a Linux distribution (like Ubuntu), be sure that you are in the Linux home directory by entering this command: cd ~. Then open your Linux file system in File Explorer by entering (don&#39;t forget the period at the end): explorer.exe .</code></pre><p>参考网址：<a href="https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions">比较 WSL 1 和 WSL 2</a></p>]]></content>
    
    
    <summary type="html">Windows Subsystem Linux</summary>
    
    
    
    <category term="Linux" scheme="https://xautshuanglong.github.io/categories/Linux/"/>
    
    
    <category term="wsl" scheme="https://xautshuanglong.github.io/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>Postgresql 学习笔记</title>
    <link href="https://xautshuanglong.github.io/2020/02/08/Database/Postgresql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://xautshuanglong.github.io/2020/02/08/Database/Postgresql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-02-07T18:22:28.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<p>Postgresql 介绍</p><span id="more"></span><h2 id="Postgresql-客户端"><a href="#Postgresql-客户端" class="headerlink" title="Postgresql 客户端"></a>Postgresql 客户端</h2><h3 id="C-API"><a href="#C-API" class="headerlink" title="C API"></a>C API</h3><h3 id="C-API-1"><a href="#C-API-1" class="headerlink" title="C++ API"></a>C++ API</h3><p>qpxx 编译问题</p><ol><li>runner 工程编译失败，取消 PQXX_SHARED 宏定义</li><li>unit_runner 工程编译失败，test_stream_from.cxx 找不到 pqxx::stream_from::extract_value<a href="std::nullptr_t">std::nullptr_t</a> 定义<br>实际 stream_from.hxx 中声明，stream_from.cxx 中定义。解决方法：在 test_stream_from.cxx 中重新定义，可能未导出成功（模板没有实例化，懒）</li></ol>]]></content>
    
    
    <summary type="html">Postgresql 数据库使用</summary>
    
    
    
    <category term="Database" scheme="https://xautshuanglong.github.io/categories/Database/"/>
    
    
    <category term="postgresql" scheme="https://xautshuanglong.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>SQLite3 学习笔记</title>
    <link href="https://xautshuanglong.github.io/2020/01/14/Database/Sqlite3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://xautshuanglong.github.io/2020/01/14/Database/Sqlite3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-14T01:27:39.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<p>SQLite：是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库一样，您不需要在系统中配置。</p><p>SQLCipher is an SQLite extension that provides 256 bit AES encryption of database files.</p><p><a href="https://www.zetetic.net/sqlcipher/">SQL Cipher</a><br><a href="https://github.com/sqlcipher/sqlcipher">Open Source Library</a><br><a href="https://github.com/sqlcipher/android-database-sqlcipher">Open Source Android</a></p><span id="more"></span><h2 id="SQLite-常用命令"><a href="#SQLite-常用命令" class="headerlink" title="SQLite 常用命令"></a>SQLite 常用命令</h2><h2 id="SQLCipher-编译"><a href="#SQLCipher-编译" class="headerlink" title="SQLCipher 编译"></a>SQLCipher 编译</h2><h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><p>开发工具：<code>Visual Studio 2015</code><br>辅助工具：<a href="https://www.activestate.com/products/tcl/">ActiveTCL</a> <code>SourceInsight</code><br>相关依赖：<code>OpenSSL</code> <code>ZLib</code></p><h3 id="编译报错"><a href="#编译报错" class="headerlink" title="编译报错"></a>编译报错</h3><ol><li><p>无法识别标识符 <code>CRITICAL_SECTION</code></p> <span class="label label-danger">问题描述</span><p> sqlite3.c(30924): error C2061: 语法错误: 标识符“CRITICAL_SECTION”</p> <span class="label label-primary">问题根源</span><p> CRITICAL_SECTION 在 winnt.h 中有定义，是平台而定。<br> 包含 windows.h 可正常识别，SQLITE_HAS_CODEC 导致 windows.h 没有被包含到源文件。</p> <span class="label label-success">解决方案</span><p> 增加 -DSQLITE_HAS_CODEC 编译参数，参考自 <a href="https://github.com/sqlcipher/sqlcipher/issues/206">issue 206</a></p></li><li><p>缺少 OpenSSL 依赖</p> <span class="label label-danger">问题描述</span><p> sqlite3.c(23821): fatal error C1083: 无法打开包括文件: “openssl/rand.h”: No such file or directory</p> <span class="label label-primary">问题根源</span><p> 加解密功能依赖于 OpenSSL 库，需要下载或编译并正确配置依赖库路径。</p> <span class="label label-success">解决方案</span><p> 模仿 TCL、ZLIB 库配置 OpenSSL 依赖库。</p></li><li><p>缺少 TCL 依赖</p> <span class="label label-danger">问题描述</span><p> 测试程序编译，找不到 TCL 依赖库</p> <span class="label label-primary">问题根源</span><p> 编译前需要 TCL 脚本生成相应源码，以及对中间生成对象进行重组。</p> <span class="label label-success">解决方案</span><p> 配置 TCL 依赖库，安装 ActiveTCL 的位置。</p></li><li><p>链接不到 OpenSSL</p> <span class="label label-danger">问题描述</span><p> 部分exe, 如 sqldiff.exe 链接失败，找不到 OpenSSL 中的函数。</p> <span class="label label-primary">问题根源</span><p> 这部分 EXE 链接时，没有依赖 OpenSSL 相关 *.lib。</p> <span class="label label-success">解决方案</span><p> OpenSSL 为新增依赖库，需要配置依赖它的所有可执行文件编译时能链接库该库。</p></li><li><p>替换 Navicat SQLite 插件报错</p> <span class="label label-danger">问题描述</span><p> 用 sqlcipher 编译出来的 sqlite3.dll 替换 Navicat Premium 12.0.28 中的 sqlite3.dll 启动时报错：<br> SQLite function sqlite3_user_authenticate cannot linked. 查看 sqlite3.dll 导出函数的确没有 sqlite3_user_authenticate 函数。</p> <span class="label label-primary">问题根源</span><p> 没有开启用户授权功能模块的控制宏。</p> <span class="label label-success">解决方案</span><p> 编译参数添加 -DSQLITE_USER_AUTHENTICATION 并且将 userauth.c 加入到编源文件列表。</p></li><li><p>Navicat 启动提示缺失部分函数</p> <span class="label label-danger">问题描述</span><p> 用 sqlcipher 编译出来的 sqlite3.dll 替换 Navicat Premium 12.0.28 中的 sqlite3.dll 启动时报错：<br> SQLite function sqlite3_libversion cannot linked.<br> 查看 sqlite3.dll 导出函数的确没有 sqlite3_libversion 函数，但是 libsqlite3.lib 中有 sqlite3_libversion 而 sqlite3.def 没有该函数。<br> 手动补全 sqlite3.def 并单独执行如下命令：</p><pre><code> link.exe /DEBUG   /NOLOGO /MACHINE:X64  /LIBPATH:..\sqlcipher-4.2.0\..\OpenSSL_x64\Release /DLL /DEF:sqlite3.def /OUT:sqlite3.dll sqlite3.lo sqlite3res.lo  libeay32.lib ssleay32.lib  userauth.lo</code></pre><p> 可正常导出且 Navicat 不报错。</p> <span class="label label-primary">问题根源</span><p> sqlite3.dll 是由静态库 libsqlite3.lib 生成，命令行参数中通过 sqlite3.def 指定导出函数。<br> 因为 sqlite3.def 没有指定相应函数名，所以 sqlite3.dll 中就没有相应导出函数。<br> 对比不同方式下生成的 libsqlite3.lib 中的函数名，发现:不加入 userauth.lo 时，函数名为 1 sqlite3_xxxx;加入 userauth.lo 时，函数名为 2 sqlite3_xxxx。<br> 再看 sqlite3.def 的生成规则，其中正则表达式以 1？（0/1个1）开头，忽略了以 2 开头的函数名。</p> <span class="label label-success">解决方案</span><p> 修改正则表达式为以 2？ 开头的函数：</p><pre><code> dumpbin /all libsqlite3.lib | $(TCLSH_CMD) $(TOP)\tool\replace.tcl include &quot;^\s+[12]? _?(sqlite3(?:session|changeset|changegroup|rebaser)?_[^@]*)(?:@\d+)?$$&quot; \1 | sort &gt;&gt; sqlite3.def</code></pre></li></ol><h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><p><a href="https://www.zetetic.net/sqlcipher/">SQLite3 SqlCipher windows下的编</a><br><a href="https://github.com/sqlcipher/sqlcipher/issues/206">Github issues CRITICAL_SECTION</a></p>]]></content>
    
    
    <summary type="html">SQLite 命令行用法，Sqlcipher 数据库加解密。</summary>
    
    
    
    <category term="Database" scheme="https://xautshuanglong.github.io/categories/Database/"/>
    
    
    <category term="sqlite" scheme="https://xautshuanglong.github.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>SELinux 学习笔记</title>
    <link href="https://xautshuanglong.github.io/2019/11/27/Linux/SELinux%E2%80%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://xautshuanglong.github.io/2019/11/27/Linux/SELinux%E2%80%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-11-27T11:56:40.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<p>SELinux</p><span id="more"></span><h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><p><a href="https://blog.51cto.com/10492754/2092597">SELinux介绍与设置</a><br><a href="https://www.linuxidc.com/Linux/2016-09/135202.htm">SELinux入门和基本配置</a><br><a href="https://zhuanlan.zhihu.com/p/30483108">做人做事，安全第一！ —— SELinux 入门</a><br><a href="https://www.cnblogs.com/xiaoluo501395377/archive/2013/05/26/3100444.html">SELinux安全系统基础</a><br><a href="http://www.toxingwang.com/management/security/1011.html">SELinux基本概念及基本配置</a><br><a href="https://cloud.tencent.com/developer/article/1188032">如何在Ubuntu上安装SELinux</a></p>]]></content>
    
    
    <summary type="html">SELinux 安全第一步。</summary>
    
    
    
    <category term="Linux" scheme="https://xautshuanglong.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>POD Trivial 普通类型和平凡类型说明</title>
    <link href="https://xautshuanglong.github.io/2019/10/19/CPlusPlus/POD-Trivial-%E6%99%AE%E9%80%9A%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%B9%B3%E5%87%A1%E7%B1%BB%E5%9E%8B%E8%AF%B4%E6%98%8E/"/>
    <id>https://xautshuanglong.github.io/2019/10/19/CPlusPlus/POD-Trivial-%E6%99%AE%E9%80%9A%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%B9%B3%E5%87%A1%E7%B1%BB%E5%9E%8B%E8%AF%B4%E6%98%8E/</id>
    <published>2019-10-19T14:37:52.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<p>C++11 新特性学习笔记：<br><code>std::enable_if</code> <code>std::is_pod</code> <code>std::is_trivial</code></p><span id="more"></span><p>参考网址：<br><a href="https://zh.cppreference.com/w/cpp/types/is_trivial">cpp_reference</a><br><a href="https://blog.csdn.net/WizardtoH/article/details/80767740">《深入理解C++11》笔记–POD类型</a><br><a href="https://www.jianshu.com/p/a961c35910d2">C++11新特性–std::enable_if和SFINAE</a></p>]]></content>
    
    
    <summary type="html">C++11 普通类型 平凡类型</summary>
    
    
    
    
    <category term="C++11" scheme="https://xautshuanglong.github.io/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title>随机数算法</title>
    <link href="https://xautshuanglong.github.io/2019/10/08/Algorithm/RandomNumberAlgorithm/"/>
    <id>https://xautshuanglong.github.io/2019/10/08/Algorithm/RandomNumberAlgorithm/</id>
    <published>2019-10-08T02:51:25.000Z</published>
    <updated>2023-08-12T07:57:58.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类型分类"><a href="#类型分类" class="headerlink" title="类型分类"></a>类型分类</h2><ol><li>数值概率算法：</li><li>拉斯维加斯算法：</li><li>蒙特卡罗算法：</li><li>舍伍德算法：</li></ol><span id="more"></span><h2 id="算法说明"><a href="#算法说明" class="headerlink" title="算法说明"></a>算法说明</h2><h3 id="线性同余"><a href="#线性同余" class="headerlink" title="线性同余"></a>线性同余</h3><p>最好最朴素的伪随机数生成算法：易理解、易实现、速度快。</p><h3 id="马特赛特旋转演示法"><a href="#马特赛特旋转演示法" class="headerlink" title="马特赛特旋转演示法"></a>马特赛特旋转演示法</h3><p><a href="https://www.cnblogs.com/shine-lee/p/9516757.html?utm_source=debugrun&utm_medium=referral">马特赛特旋转演算法</a></p><h2 id="几种平台的实现"><a href="#几种平台的实现" class="headerlink" title="几种平台的实现"></a>几种平台的实现</h2><h3 id="Microsoft-Visual-C-C"><a href="#Microsoft-Visual-C-C" class="headerlink" title="Microsoft Visual C/C++"></a>Microsoft Visual C/C++</h3><p><code>C/C++ 语言中的实现</code> 线性同余法</p><p>$$<br>X_n = (X_{n-1} \times a)\ mod\ M<br>$$</p><p>测试代码：(Visual Studio 2015)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">RandomNumberTest::LinearCongruentialGeneratorTest</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    srand(<span class="number">1</span>); <span class="comment">// 注释掉该语句，输出内容相同，旨在说明默认种子就是 1。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>.width(<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; rand();</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    srand(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>.width(<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; rand();</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br><img src="%5Cimages%5CAlgorithm%5CRandomNumber_MicrosoftVisualC_Test.png" alt="输出结果"><br>试验总结：</p><ul><li>rand() 函数默认种子为 1；</li><li>不设置初始种子的话，每次重启应用生成的伪随机数序列相同；（默认种子相同）</li><li>关于线性同余公式，每次生成新的伪随机数，以上一个伪随机数作为种子（因子）。<br>并非直接将伪随机数代入公式中的 $ X_{n-1} $ (通过代码说明)；</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">*void srand(seed) - seed the random number generator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*Purpose:</span></span><br><span class="line"><span class="comment">*       Seeds the random number generator with the int given.  Adapted from the</span></span><br><span class="line"><span class="comment">*       BASIC random number generator.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*Entry:</span></span><br><span class="line"><span class="comment">*       unsigned seed - seed to seed rand # generator with</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*Exit:</span></span><br><span class="line"><span class="comment">*       None.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*Exceptions:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __cdecl <span class="title function_">srand</span> <span class="params">( <span class="type">unsigned</span> <span class="type">int</span> seed )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 将种子保存到 _getptd()-&gt;_holdrand 中</span></span><br><span class="line">    _getptd()-&gt;_holdrand = (<span class="type">unsigned</span> <span class="type">long</span>)seed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">*int rand() - returns a random number</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*Purpose:</span></span><br><span class="line"><span class="comment">*       returns a pseudo-random number 0 through 32767.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*Entry:</span></span><br><span class="line"><span class="comment">*       None.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*Exit:</span></span><br><span class="line"><span class="comment">*       Returns a pseudo-random number 0 through 32767.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*Exceptions:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">rand</span> <span class="params">( <span class="type">void</span> )</span></span><br><span class="line">&#123;</span><br><span class="line">    _ptiddata ptd = _getptd();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据种子和线性同余发生器，产生下一个伪随机数</span></span><br><span class="line">    <span class="keyword">return</span>( ((ptd-&gt;_holdrand = ptd-&gt;_holdrand * <span class="number">214013L</span> + <span class="number">2531011L</span>) &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x7fff</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$$<br>Seed_n =<br>\begin{cases}<br>    Constant &amp; n = 0 \\<br>    Seed_{n-1} \times a + c &amp; n \geq 1<br>\end{cases}<br>$$</p><p>$$<br>X_n = Seed_n &gt;&gt; 16\ &amp;\ 32767 \text{ (0x7fff) }<br>$$</p><pre><code>可以这样理解：取伪随机数种子的第 16~30 二进制位，共 15 位（从 0 开始）。</code></pre><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>测试代码：(Eclipse JEE + JDK 1.8.0_221)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">RandomTest</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    logger.debug(<span class="string">&quot;-----&gt; AttemptRandom.RandomTest() &lt;-----&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> row * col;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; total; i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//        System.out.printf(&quot;%10s&quot;, i);</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">randomNumber</span> <span class="operator">=</span> Math.random();</span><br><span class="line">        System.out.printf(<span class="string">&quot;%25.18f&quot;</span>, randomNumber);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % col == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.printf(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">Random</span> <span class="variable">randomDouble</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; total; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">randomDoubleN</span> <span class="operator">=</span> randomDouble.nextDouble();</span><br><span class="line">        System.out.printf(<span class="string">&quot;%25.18f&quot;</span>, randomDoubleN);</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % col == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.printf(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">Random</span> <span class="variable">randomDoubleCopy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; total; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">randomDoubleN</span> <span class="operator">=</span> randomDoubleCopy.nextDouble();</span><br><span class="line">        System.out.printf(<span class="string">&quot;%25.18f&quot;</span>, randomDoubleN);</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % col == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.printf(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">Random</span> <span class="variable">randomInt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; total; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">randomIntN</span> <span class="operator">=</span> randomInt.nextInt();</span><br><span class="line">        System.out.printf(<span class="string">&quot;%15d&quot;</span>, randomIntN);</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % col == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.printf(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    long oldseed = 1L;</span></span><br><span class="line"><span class="comment">//    long oldseed = 1L ^ 25214903917L;</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">oldseed</span> <span class="operator">=</span> <span class="number">25214903916L</span>; <span class="comment">// 相当于构造 Random 时初始种子为 1</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">nextseed</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; total; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        nextseed = (oldseed * <span class="number">25214903917L</span> + <span class="number">11L</span>) &amp; <span class="number">281474976710655L</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">randomValue</span> <span class="operator">=</span> (<span class="type">int</span>)(nextseed &gt;&gt;&gt; (<span class="number">48</span> - <span class="number">32</span>));</span><br><span class="line">        oldseed = nextseed;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%15d&quot;</span>, randomValue);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % col == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br><img src="%5Cimages%5CAlgorithm%5CRandomNumber_Java_Test.png" alt="输出结果"><br>试验总结：</p><ul><li>采用线性同余算法；</li><li>种子相同时产生相同的伪随机数序列；</li><li>Random 类默认种子根据时间获得，赋值种子为 1 ，会通过异或运算生成第一个种子。</li></ul><p>Java 源码 JDK 1.8.0_221</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Random.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 十进制 25214903917 [0x5deece66d];</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">multiplier</span> <span class="operator">=</span> <span class="number">0x5DEECE66DL</span>;</span><br><span class="line"><span class="comment">// 11 [0xb]</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">addend</span> <span class="operator">=</span> <span class="number">0xBL</span>;</span><br><span class="line"><span class="comment">// 281474976710655 [0xffffffffffff]</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">mask</span> <span class="operator">=</span> (<span class="number">1L</span> &lt;&lt; <span class="number">48</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new random number generator. This constructor sets</span></span><br><span class="line"><span class="comment"> * the seed of the random number generator to a value very likely</span></span><br><span class="line"><span class="comment"> * to be distinct from any other invocation of this constructor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Random</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(seedUniquifier() ^ System.nanoTime());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new random number generator using a single &#123;<span class="doctag">@code</span> long&#125; seed.</span></span><br><span class="line"><span class="comment"> * The seed is the initial value of the internal state of the pseudorandom</span></span><br><span class="line"><span class="comment"> * number generator which is maintained by method &#123;<span class="doctag">@link</span> #next&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The invocation &#123;<span class="doctag">@code</span> new Random(seed)&#125; is equivalent to:</span></span><br><span class="line"><span class="comment"> *  &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * Random rnd = new Random();</span></span><br><span class="line"><span class="comment"> * rnd.setSeed(seed);&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> seed the initial seed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>   #setSeed(long)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Random</span><span class="params">(<span class="type">long</span> seed)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getClass() == Random.class)</span><br><span class="line">        <span class="built_in">this</span>.seed = <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(initialScramble(seed));</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// subclass might have overriden setSeed</span></span><br><span class="line">        <span class="built_in">this</span>.seed = <span class="keyword">new</span> <span class="title class_">AtomicLong</span>();</span><br><span class="line">        setSeed(seed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">initialScramble</span><span class="params">(<span class="type">long</span> seed)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (seed ^ multiplier) &amp; mask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the next pseudorandom, uniformly distributed &#123;<span class="doctag">@code</span> int&#125;</span></span><br><span class="line"><span class="comment"> * value from this random number generator&#x27;s sequence. The general</span></span><br><span class="line"><span class="comment"> * contract of &#123;<span class="doctag">@code</span> nextInt&#125; is that one &#123;<span class="doctag">@code</span> int&#125; value is</span></span><br><span class="line"><span class="comment"> * pseudorandomly generated and returned. All 2&lt;sup&gt;32&lt;/sup&gt; possible</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> int&#125; values are produced with (approximately) equal probability.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The method &#123;<span class="doctag">@code</span> nextInt&#125; is implemented by class &#123;<span class="doctag">@code</span> Random&#125;</span></span><br><span class="line"><span class="comment"> * as if by:</span></span><br><span class="line"><span class="comment"> *  &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * public int nextInt() &#123;</span></span><br><span class="line"><span class="comment"> *   return next(32);</span></span><br><span class="line"><span class="comment"> * &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the next pseudorandom, uniformly distributed &#123;<span class="doctag">@code</span> int&#125;</span></span><br><span class="line"><span class="comment"> *         value from this random number generator&#x27;s sequence</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> next(<span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generates the next pseudorandom number. Subclasses should</span></span><br><span class="line"><span class="comment"> * override this, as this is used by all other methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The general contract of &#123;<span class="doctag">@code</span> next&#125; is that it returns an</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> int&#125; value and if the argument &#123;<span class="doctag">@code</span> bits&#125; is between</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> 1&#125; and &#123;<span class="doctag">@code</span> 32&#125; (inclusive), then that many low-order</span></span><br><span class="line"><span class="comment"> * bits of the returned value will be (approximately) independently</span></span><br><span class="line"><span class="comment"> * chosen bit values, each of which is (approximately) equally</span></span><br><span class="line"><span class="comment"> * likely to be &#123;<span class="doctag">@code</span> 0&#125; or &#123;<span class="doctag">@code</span> 1&#125;. The method &#123;<span class="doctag">@code</span> next&#125; is</span></span><br><span class="line"><span class="comment"> * implemented by class &#123;<span class="doctag">@code</span> Random&#125; by atomically updating the seed to</span></span><br><span class="line"><span class="comment"> *  &lt;pre&gt;&#123;<span class="doctag">@code</span> (seed * 0x5DEECE66DL + 0xBL) &amp; ((1L &lt;&lt; 48) - 1)&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> * and returning</span></span><br><span class="line"><span class="comment"> *  &lt;pre&gt;&#123;<span class="doctag">@code</span> (int)(seed &gt;&gt;&gt; (48 - bits))&#125;.&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This is a linear congruential pseudorandom number generator, as</span></span><br><span class="line"><span class="comment"> * defined by D. H. Lehmer and described by Donald E. Knuth in</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;The Art of Computer Programming,&lt;/i&gt; Volume 3:</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;Seminumerical Algorithms&lt;/i&gt;, section 3.2.1.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  bits random bits</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the next pseudorandom value from this random number</span></span><br><span class="line"><span class="comment"> *         generator&#x27;s sequence</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>  1.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">(<span class="type">int</span> bits)</span> &#123;</span><br><span class="line">    <span class="type">long</span> oldseed, nextseed;</span><br><span class="line">    <span class="type">AtomicLong</span> <span class="variable">seed</span> <span class="operator">=</span> <span class="built_in">this</span>.seed;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        oldseed = seed.get();</span><br><span class="line">        nextseed = (oldseed * multiplier + addend) &amp; mask;</span><br><span class="line">    &#125; <span class="keyword">while</span> (!seed.compareAndSet(oldseed, nextseed));</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)(nextseed &gt;&gt;&gt; (<span class="number">48</span> - bits));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;类型分类&quot;&gt;&lt;a href=&quot;#类型分类&quot; class=&quot;headerlink&quot; title=&quot;类型分类&quot;&gt;&lt;/a&gt;类型分类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;数值概率算法：&lt;/li&gt;
&lt;li&gt;拉斯维加斯算法：&lt;/li&gt;
&lt;li&gt;蒙特卡罗算法：&lt;/li&gt;
&lt;li&gt;舍伍德算法：&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://xautshuanglong.github.io/categories/Algorithm/"/>
    
    
    <category term="Random" scheme="https://xautshuanglong.github.io/tags/Random/"/>
    
  </entry>
  
</feed>
